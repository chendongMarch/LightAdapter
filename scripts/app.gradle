// 为 app module 配置统一依赖

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: '../scripts/_utils.gradle'
apply plugin: 'com.alibaba.arouter'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion versions.compileSdkVersion
    defaultConfig {
        applicationId params.applicationId
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode gitVersionCode()
        versionName gitVersionName()
        multiDexEnabled true
    }

    // data binding
    dataBinding {
        enabled false
    }

    // java8 support
    android {
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    // buildTypes
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {

        }
    }

    // source
    sourceSets {
        main {
            res.srcDirs = ['src/main/res']
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    // lint
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    // heap
    dexOptions {
        javaMaxHeapSize "4g"
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}


// 整合打出包的路径
android.applicationVariants.all { variant ->
    def buildTypeName = variant.buildType.name
    def versionName = variant.mergedFlavor.versionName
    def versionCode = variant.mergedFlavor.versionCode
    variant.outputs.all { output ->
        outputFileName = "app_${versionName}_${versionCode}_${buildTypeName}.apk"
    }
}


// 转移 apk
def copyApk() {
    def dir = new File(getProjectDir().getPath() + "/build/outputs/apk/")
    def files = dir.listFiles()
    files.each { File file ->
        def apkDir = rootDir.getAbsolutePath() + File.separator + 'products'
        copy {
            from file.getAbsolutePath()
            into apkDir + File.separator + file.name
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('assemble')) {
        task.doLast {
            copyApk()
        }
    }
}

// add dependencies for app
dependencies {
    add('kapt', deps.butterknifeProcessor, {})
    add('kapt', deps.arouterCompiler, {})
    add('kapt', deps.lifecycle_compiler, {})
    add('kapt', deps.mantis_compiler, {})
    add('kapt', deps.roomCompiler, {})
}

def componentsPath = "${project.rootProject.rootDir.path}/components.gradle"
if (new File(componentsPath).exists()) {
    apply from: componentsPath
}
// 组件化依赖
def componentDepsPath = "${project.rootProject.rootDir.path}/scripts/component/component_deps.gradle"
apply from: componentDepsPath
